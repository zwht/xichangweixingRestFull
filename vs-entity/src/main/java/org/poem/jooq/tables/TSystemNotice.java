/*
 * This file is generated by jOOQ.
 */
package org.poem.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.poem.jooq.Indexes;
import org.poem.jooq.Keys;
import org.poem.jooq.Public;
import org.poem.jooq.tables.records.TSystemNoticeRecord;


/**
 * 系统通知
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TSystemNotice extends TableImpl<TSystemNoticeRecord> {

    private static final long serialVersionUID = 1230111464;

    /**
     * The reference instance of <code>public.t_system_notice</code>
     */
    public static final TSystemNotice T_SYSTEM_NOTICE = new TSystemNotice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TSystemNoticeRecord> getRecordType() {
        return TSystemNoticeRecord.class;
    }

    /**
     * The column <code>public.t_system_notice.id</code>.
     */
    public final TableField<TSystemNoticeRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.t_system_notice.title</code>. 类型
     */
    public final TableField<TSystemNoticeRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(50), this, "类型");

    /**
     * The column <code>public.t_system_notice.user_id</code>. 用户
     */
    public final TableField<TSystemNoticeRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT, this, "用户");

    /**
     * The column <code>public.t_system_notice.contents</code>. 详情
     */
    public final TableField<TSystemNoticeRecord, String> CONTENTS = createField("contents", org.jooq.impl.SQLDataType.VARCHAR(500), this, "详情");

    /**
     * The column <code>public.t_system_notice.send_time</code>. 发送时间
     */
    public final TableField<TSystemNoticeRecord, Timestamp> SEND_TIME = createField("send_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "发送时间");

    /**
     * The column <code>public.t_system_notice.status</code>. 状态
     */
    public final TableField<TSystemNoticeRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER, this, "状态");

    /**
     * The column <code>public.t_system_notice.create_user</code>. 创建人
     */
    public final TableField<TSystemNoticeRecord, Long> CREATE_USER = createField("create_user", org.jooq.impl.SQLDataType.BIGINT, this, "创建人");

    /**
     * The column <code>public.t_system_notice.create_time</code>. 创建时间
     */
    public final TableField<TSystemNoticeRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "创建时间");

    /**
     * The column <code>public.t_system_notice.update_user</code>. 修改人
     */
    public final TableField<TSystemNoticeRecord, Long> UPDATE_USER = createField("update_user", org.jooq.impl.SQLDataType.BIGINT, this, "修改人");

    /**
     * The column <code>public.t_system_notice.update_time</code>. 修改时间
     */
    public final TableField<TSystemNoticeRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "修改时间");

    /**
     * The column <code>public.t_system_notice.flag</code>. 标识
     */
    public final TableField<TSystemNoticeRecord, Boolean> FLAG = createField("flag", org.jooq.impl.SQLDataType.BOOLEAN, this, "标识");

    /**
     * Create a <code>public.t_system_notice</code> table reference
     */
    public TSystemNotice() {
        this(DSL.name("t_system_notice"), null);
    }

    /**
     * Create an aliased <code>public.t_system_notice</code> table reference
     */
    public TSystemNotice(String alias) {
        this(DSL.name(alias), T_SYSTEM_NOTICE);
    }

    /**
     * Create an aliased <code>public.t_system_notice</code> table reference
     */
    public TSystemNotice(Name alias) {
        this(alias, T_SYSTEM_NOTICE);
    }

    private TSystemNotice(Name alias, Table<TSystemNoticeRecord> aliased) {
        this(alias, aliased, null);
    }

    private TSystemNotice(Name alias, Table<TSystemNoticeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("系统通知"));
    }

    public <O extends Record> TSystemNotice(Table<O> child, ForeignKey<O, TSystemNoticeRecord> key) {
        super(child, key, T_SYSTEM_NOTICE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_T_SYSTEM_NOTICE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TSystemNoticeRecord> getPrimaryKey() {
        return Keys.PK_T_SYSTEM_NOTICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TSystemNoticeRecord>> getKeys() {
        return Arrays.<UniqueKey<TSystemNoticeRecord>>asList(Keys.PK_T_SYSTEM_NOTICE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TSystemNotice as(String alias) {
        return new TSystemNotice(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TSystemNotice as(Name alias) {
        return new TSystemNotice(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TSystemNotice rename(String name) {
        return new TSystemNotice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TSystemNotice rename(Name name) {
        return new TSystemNotice(name, null);
    }
}
